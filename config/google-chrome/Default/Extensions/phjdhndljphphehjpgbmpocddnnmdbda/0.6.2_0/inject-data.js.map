{"version":3,"sources":["webpack://k6-browser-recorder/./src/content-scripts/inject-data.js"],"names":["__platform","runtime","connect","name","onMessage","addListener","state","harRecords","currentRecording","controls","length","window","localStorage","setItem","JSON","stringify","error"],"mappings":"AAEaA,OAAWC,QAAQC,QAAQ,CAAEC,KAAM,kBAE3CC,UAAUC,aAAaC,IAC1B,MAAM,WAAEC,EAAF,iBAAcC,EAAmB,GAAMF,EAAMG,SAEnD,GAAID,EAAmBD,EAAWG,OAChC,IACEC,OAAOC,aAAaC,QATN,gBAS2BC,KAAKC,UAAUR,EAAWC,KACnE,MAAOQ,GACPL,OAAOC,aAAaC,QAVA,iBAU2BG,EAAMb","file":"inject-data.js","sourcesContent":["const STORAGE_KEY = '__TEST_DATA__'\nconst ERROR_STORAGE_KEY = '__TEST_ERROR__'\nconst port = __platform.runtime.connect({ name: 'injected-data' })\n\nport.onMessage.addListener((state) => {\n  const { harRecords, currentRecording = 0 } = state.controls\n\n  if (currentRecording < harRecords.length) {\n    try {\n      window.localStorage.setItem(STORAGE_KEY, JSON.stringify(harRecords[currentRecording]))\n    } catch (error) {\n      window.localStorage.setItem(ERROR_STORAGE_KEY, error.name)\n    }\n  }\n})\n"],"sourceRoot":""}